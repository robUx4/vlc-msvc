#!/bin/sh

ARGS="cl.exe -EHsc"
ARGS_DEBUG="-FS -Zi"
ARGS_RELEASE="-Gw -Ot"

SCRIPT=$(readlink -f "$0")
SCRIPTPATH=$(dirname "$SCRIPT")
INCLUDES_FOLDER=$SCRIPTPATH/../headers

case $VLC_PLATFORM in
	Windows|Metrox86)
		WINAPI_FAMILY=WINAPI_FAMILY_APP
		FORCED_LIBS="user32.lib Advapi32.lib RuntimeObject.lib"
		;;
	WindowsPhone)
		WINAPI_FAMILY=WINAPI_FAMILY_PHONE_APP
		FORCED_LIBS="WindowsPhoneCore.lib RuntimeObject.lib PhoneAppModelHost.lib -NODEFAULTLIB:ole32.lib -NODEFAULTLIB:kernel32.lib"
		;;
	*)
		echo "clwrap: Invalid platform: $VLC_PLATFORM"
		exit 1
esac

ARGS="$ARGS -DWINAPI_FAMILY=$WINAPI_FAMILY"

NO_LOGO="nologo"

#echo VS_RUNTIME = $VS_RUNTIME
if [ "$VS_RUNTIME" == "static" ]; then
  STATIC_RUNTIME=1
else
  STATIC_RUNTIME=0
fi

while [ $# -gt 0 ]; do
    case $1 in
        /[a-z]/*|/usr/*)
            param=`cygpath -w $1`
            ;;
        /*)
            param=-"${1#/}"
            ;;
        *)
            param=$1
            ;;
    esac
    case $param in
	-o)
		outfile=`cygpath -w $2`
		compile=1
		shift
		;;
	-Fo*)
		outfile=${param#-Fo}
		compile=1
		;;
	-E)
		preproc=1
		;;
	-c)
		ARGS="$ARGS -c"
		compile=1
		;;
	*.c)
		file=`cygpath -w $param`
		inputfile=$file
		if [ "$outfile" == "" ]; then
			outfile=${file%.*}.o
			exefile=${file%.*}.exe
		fi
		ARGS="$ARGS -Tc$file"
		;;
	*.cpp|*.cxx|*.cc)
		file=`cygpath -w $param`
		inputfile=$file
		if [ "$outfile" == "" ]; then
			outfile=${file%.*}.o
			exefile=${file%.*}.exe
		fi
		ARGS="$ARGS -Tp$file"
		;;
	*.s|*.asm)
		file=`cygpath -w $param`
		inputfile=$file
		if [ "$outfile" == "" ]; then
			outfile=${file%.*}.o
			exefile=${file%.*}.exe
		fi
		compile_asm=yes
		ARGS="$AS $file"
		;;
	*.dll)
		EXTRALIBS="$EXTRALIBS $param"
		;;
	-M)
		deps=1
		;;
	-D*)
		def=$(echo $param | sed 's/ /_/')
		# Added to handle -Dsome_include=<somefile.h>
		# That doesn't work unless the bracket part is quoted
		case $def in
            *=\<*\>)
				def=`echo $def | sed 's/=/\"=/'`\"	
				;;
			*=\"*\")
				def=`echo $def | sed 's/\"/\\\"/g'`
				;;
		esac
		ARGS="$ARGS $def"
		;;
	-I)
		# Handles -I <path>
		ARGS="$ARGS -I`cygpath -w $2`"
		shift
		;;
	-I*)
		# Handles -I<path> (without space)
		ARGS="$ARGS -I`cygpath -w ${param#-I}`"
		;;
	-include)
		ARGS="$ARGS -FI`cygpath -w $2`"
		shift
		;;
	-FI*)
		ARGS="$ARGS -FI`cygpath -w ${param#-FI}`"
		;;
	-lm)
		;;
	-l*)
		libname=${param#-l}
		# All libraries are expected to be in unix format since we act as kind of gcc.
		# However, when it comes to system libraries, there's no choice but to use the 
		# windows naming convention.
        case $libname in
            "shlwapi" | "ole32" )
                # Ignore those for windows phone
                ;;
            "stdc++" | "pthreadGC2" )
                # Ignore those
                ;;
	    *.lib)
		ARGS="$ARGS $libname"
		;;
            "ws2_32" | "winmm" | "oleaut32" | "uuid" | "strmiids" | "ksuser" | "gdi32" | "dxguid" | "wbemuuid" | "mfuuid" | "iphlpapi" | "d3dx9" | "user32" | "psapi" | "wininet" | "runtimeobject" | "mfplat" | "d3dcompiler" | "d3d11" )
                ARGS="$ARGS $libname.lib"
                ;;
            *.a)
                ARGS="$ARGS lib$libname.a"
                ;;
            *)
                ARGS="$ARGS $libname.lib"
                ;;
        esac
		;;
	-shared|-DLL)
		BUILD_LIB=1
		ARGS="$ARGS -LD"
		;;
	-static)
		BUILD_LIB=
		;;
	-shared-libgcc)
		if [ "$STATIC_RUNTIME" == "1" ]; then
			echo "ERROR: Trying to use a dynamic linking while using static linking"
			exit 1
		fi
		;;
	-static-libgcc)
		if [ "$STATIC_RUNTIME" == "0" ]; then
			echo "WARNING: Trying to use a static linking while using dynamic linking"
			#exit 1
		fi
		;;
	-O)
		ARGS="$ARGS -O2"
		;;
	-O0)
		# this may cause unneeded code generation ARGS="$ARGS -Od"
		# testing
		ARGS="$ARGS -O1"
		;;
	-O3)
		ARGS="$ARGS -Ox"
		;;
	-L*)
        libpath=${param#-L}
        if [ "$libpath" != "/mingw32/lib" ]; then
            LIBDIR="$LIBDIR -LIBPATH:`cygpath -w $libpath`"
        fi
		;;
	-g)
		HAVE_DEBUG=1
		;;
	-Wall)
		WARNINGS="-W4"
		;;
	-Wextra)
		WARNINGS="-Wall"
		;;
	-Werror)
		WARNINGS="-WX"
		;;
	-Wl*)
		params=${param#-Wl,}
        for p in `echo $params | sed -n 1'p' | tr ',' '\n'`; do
            case $p in
                -DLL)
                    BUILD_LIB=1
                    ARGS="$ARGS -LD"
                    ;;
                -IMPLIB*)
                    EXTRALIBS="$EXTRALIBS $p"
            esac
        done
		;;
	-W*)
		;;
	*.a|*.obj|*.lib)
		# Keep this a low priority match
		ARGS="$ARGS `cygpath -w $param`"
		;;
	-nologo*)
		NO_LOGO=${param#-}
		;;
#	/*)
#		#libav's configure step uses absolute path in msys format, we need to convert
#		# them manually to native windows path.
#		ARGS="$ARGS `cygpath -w $param`"
#		
#		;;
	-ffast-math)
		ARGS="$ARGS -fp:fast"
		;;
	-fomit-frame-pointer)
		ARGS="$ARGS -Oy"
		;;
	-fno-math-errno)
		ARGS="$ARGS -fp:except-"
		;;
	-pedantic)
		ARGS="$ARGS -sdl"
		;;
	-std=*)
		C_STD_VARIANT=${param#--std=}
		if [ "$C_STD_VARIANT" == "gnu99" ]; then
			echo "Unsupported C standard $C_STD_VARIANT"
			exit 1
		fi
		;;
	-pipe|-funroll-loops|-mms-bitfields|-fnative-struct|--no-seh|--nxcompat|--dynamicbase|-fexceptions|-fno-signed-zeros|-fgnu89-inline)
		# silently ignore known flags
		;;
	-march=*)
		ARCH=${param#-march=}
		if [ "$VLC_ARCH" == "x86" ]; then
			if [ "$ARCH" != "i686" ]; then
				echo "Invalid $param with VLC_ARCH=$VLC_ARCH"
				exit 1
			fi
		else
			if [ "$VLC_ARCH" == "arm" ]; then
				if [ "$ARCH" != "arm" ]; then
					echo "Invalid $param with VLC_ARCH=$VLC_ARCH"
					exit 1
				fi
			else
				echo "VLC_ARCH no supported $VLC_ARCH"
				exit 1
			fi
		fi
		;;
	-cpu=*|-FS)
		# silently ignore for now
		;;
	-Ze|-Za)
		# deprecated and incompatible with latest WDK
		;;
	*)
		ARGS="$ARGS $param"
		;;
	esac
	shift
done

if [ "$compile_asm" == "" ]; then
	if [ "$HAVE_DEBUG" != "" ]; then
	    ARGS="$ARGS $ARGS_DEBUG"
	else
	    ARGS="$ARGS $ARGS_RELEASE"
	fi

	# Don't mix debug with non debug libraries
	if [ "$STATIC_RUNTIME" == "1" ]; then
	  if [ "$VLC_CONFIGURATION" == "Debug" ]; then
	    ARGS="$ARGS -MTd"
	    FORCED_LIBS="$FORCED_LIBS -NODEFAULTLIB:msvcrt.lib -NODEFAULTLIB:libcmt.lib"
	  else
	    ARGS="$ARGS -MT"
	    FORCED_LIBS="$FORCED_LIBS -NODEFAULTLIB:msvcrtd.lib -NODEFAULTLIB:libcmtd.lib"
	  fi
	else
	  if [ "$VLC_CONFIGURATION" == "Debug" ]; then
	    ARGS="$ARGS -MDd"
	    FORCED_LIBS="$FORCED_LIBS -NODEFAULTLIB:msvcrt.lib -NODEFAULTLIB:libcmt.lib"
	  else
	    ARGS="$ARGS -MD"
	    FORCED_LIBS="$FORCED_LIBS -NODEFAULTLIB:msvcrtd.lib -NODEFAULTLIB:libcmtd.lib"
	  fi
	fi

	ARGS="$ARGS $WARNINGS -wd4820 -wd4668 -wd4514 -wd4710 -wd4350 -wd4204 -wd4131 -wd4706 -wd4711"
	ARGS="$ARGS -I`cygpath -w $INCLUDES_FOLDER`"
	# Hotfix some contribs:
	ARGS="$ARGS -FI`cygpath -w $INCLUDES_FOLDER/fixup.h`"
fi
ARGS="$ARGS -$NO_LOGO"

# There need to be no space between all the segments of the variable
# It still needs to be considered as 3 values and not one
# There need to be double quotes around the path

if [ "$preproc" != "" ]; then
	if [ "$compile" != "" ]; then
		ARGS="$ARGS -P -Fi$outfile"
	else
		#ARGS=$(echo $ARGS | sed s/-P/-E/)
		ARGS="$ARGS -EP"
	fi
else
	if [ "$outfile" != "" ]; then
		if [ "$compile" != "" ]; then
			if [ "$inputfile" == "" ]; then
				ARGS="$ARGS -o $outfile"
			else
				if [ "$outfile" != "${inputfile%.*}.exe" ]; then
					if [ "$compile_asm" != "" ]; then
						ARGS="$ARGS -o $outfile"
					else
						# avoid LNK1149 error
						ARGS="$ARGS -Fo$outfile"
					fi
				fi
			fi
		else
			ARGS="$ARGS -Fe$exefile"
		fi
	fi
fi
EXTRALIBS="$EXTRALIBS $FORCED_LIBS"

if [ "$deps" != "" ]; then
	$ARGS -Zs -showIncludes | awk '/including/ { sub(/^.*file: */, ""); gsub(/\\/, "/"); if (!match($0, / /)) print "'$inputfile':", $0 }'
	exit $?
fi

if [ "$compile_asm" == "" ]; then
	if [ "$LIBDIR" != "" -o "$EXTRALIBS" != "" -o "$BUILD_LIB" != "" ]; then
	    ARGS="$ARGS -link $EXTRALIBS $LIBDIR"
	    if [ "$BUILD_LIB" != "" ]; then
		# Ensure all our libraries are called "libXXX"
		ARGS="$ARGS -out:$outfile -APPCONTAINER"
	    fi
	fi
fi

if [ "$compile_asm" != "" ]; then
	echo compile ASM: $ARGS
fi

#echo $ARGS
cmd /C "$ARGS"
exit $?

