#!/bin/sh

echo "CC Wrapping $@"

ARGS="cl.exe -MD -EHsc"
ARGS_DEBUG="-FS -Zi"
ARGS_RELEASE="-Gw -Ot"

SCRIPT=$(readlink -f "$0")
SCRIPTPATH=$(dirname "$SCRIPT")
INCLUDES_FOLDER=$SCRIPTPATH/../headers

case $VLC_PLATFORM in
	Windows)
		WINAPI_FAMILY=WINAPI_FAMILY_APP
		FORCED_LIBS="\"user32.lib\" \"kernel32.lib\" \"Advapi32.lib\" \"Ole32.lib\" \"RuntimeObject.lib\" -NODEFAULTLIB:\"ole32.lib\" -NODEFAULTLIB:\"kernel32.lib\" -NODEFAULTLIB:\"ws2_32.lib\""
		;;
	WindowsPhone)
		WINAPI_FAMILY=WINAPI_FAMILY_PHONE_APP
		FORCED_LIBS="\"WindowsPhoneCore.lib\" \"RuntimeObject.lib\" \"PhoneAppModelHost.lib\" -NODEFAULTLIB:\"ole32.lib\" -NODEFAULTLIB:\"kernel32.lib\" -NODEFAULTLIB:\"ws2_32.lib\""
		;;
	*)
		echo "clwrap: Invalid platform: $VLC_PLATFORM"
		exit 1
esac

while [ $# -gt 0 ]; do
    case $1 in
	-o)
		outfile=`cygpath -w $2`
		compile=1
		shift
		;;
	-E)
		ARGS="$ARGS -P"
		preproc=1
		;;
	-c)
		;;
	*.c|*.cc)
		file=`cygpath -w $1`
		inputfile=$file
		if [ "$outfile" == "" ]; then
			outfile=${file%.*}.o
		fi
		ARGS="$ARGS -Tc$file"
		compile=1
		;;
	*.cpp|*.cxx)
		file=`cygpath -w $1`
		inputfile=$file
		if [ "$outfile" == "" ]; then
			outfile=${file%.*}.o
		fi
		ARGS="$ARGS -Tp$file"
		compile=1
		;;
	*.dll)
		EXTRALIBS="$EXTRALIBS $1"
		;;
	-M)
		deps=1
		;;
	-D*)
		def=$(echo $1 | sed 's/ /_/')
		# Added to handle -Dsome_include=<somefile.h>
		# That doesn't work unless the bracket part is quoted
		case $def in
            *=\<*\>)
				def=`echo $def | sed 's/=/\"=/'`\"	
				;;
			*=\"*\")
				def=`echo $def | sed 's/\"/\\\"/g'`
				;;
		esac
		ARGS="$ARGS $def"
		;;
	-I)
		# Handles -I <path>
		ARGS="$ARGS -I`cygpath -w $2`"
		shift
		;;
	-I*)
		# Handles -I<path> (without space)
		ARGS="$ARGS -I`cygpath -w ${1#-I}`"
		;;
	-lm)
		;;
	-l*)
		libname=${1#-l}
		# All libraries are expected to be in unix format since we act as kind of gcc.
		# However, when it comes to system libraries, there's no choice but to use the 
		# windows naming convention.
        case $libname in
            "shlwapi" | "ole32" )
                # Ignore those for windows phone
                ;;
            "ws2_32" | "winmm" | "shlwapi" | "ole32" | "oleaut32" | "uuid" | "strmiids" | "ksuser" | "gdi32" | "dxguid" | "wbemuuid" | "mfuuid" | "iphlpapi" | "d3dx9" | "user32" | "psapi" | "wininet" | "runtimeobject" | "mfplat" )
                ARGS="$ARGS $libname.lib"
                ;;
            "stdc++" | "pthreadGC2" )
                # Ignore those
                ;;
            *)
                ARGS="$ARGS lib$libname.a"
                ;;
        esac
		;;
	-shared|-DLL)
		BUILD_LIB=1
		ARGS="$ARGS -LD"
		;;
	-O3)
		ARGS="$ARGS -O2"
		;;
	-L*)
        libpath=${1#-L}
        if [ "$libpath" != "/mingw32/lib" ]; then
            LIBDIR="$LIBDIR -LIBPATH:`cygpath -w $libpath`"
        fi
		;;
	-g)
		HAVE_DEBUG=1
		;;
    -Wall)
        # You DON'T want this.
        ;;
	-Wl*)
		params=${1#-Wl,}
        for p in `echo $params | sed -n 1'p' | tr ',' '\n'`; do
            case $p in
                -DLL)
                    BUILD_LIB=1
                    ARGS="$ARGS -LD"
                    ;;
                -IMPLIB*)
                    EXTRALIBS="$EXTRALIBS $p"
            esac
        done
		;;
	-W*)
		WARNINGS="-W3"
		;;
	*.a|*.obj|*.lib)
		# Keep this a low priority match
		ARGS="$ARGS `cygpath -w $1`"
		;;
	/*)
		#libav's configure step uses absolute path in msys format, we need to convert
		# them manually to native windows path.
		ARGS="$ARGS `cygpath -w $1`"
		
		;;
	*)
		ARGS="$ARGS $1"
		;;
	esac
	shift
done

if [ "$HAVE_DEBUG" != "" ]; then
    ARGS="$ARGS $ARGS_DEBUG"
else
    ARGS="$ARGS $ARGS_RELEASE"
fi

#ARGS="$ARGS -D_USE_MATH_DEFINES -DWIN32 -D_WIN32_WINNT=0x603 -DFORCE_WINSTORECOMPAT -DUNICODE -D_UNICODE -D_CRT_SECURE_NO_WARNINGS -DNOMINMAX"
ARGS="$ARGS -DWINAPI_FAMILY=$WINAPI_FAMILY"
ARGS="$ARGS $WARNINGS"
ARGS="$ARGS -I`cygpath -w $INCLUDES_FOLDER`"
# Hotfix some contribs:
ARGS="$ARGS -FI`cygpath -w $INCLUDES_FOLDER/fixup.h`"
#ARGS="$ARGS -FI`cygpath -w $INCLUDES_FOLDER/winstorecompat.h`"

# There need to be no space between all the segments of the variable
# It still needs to be considered as 3 values and not one
# There need to be double quotes around the path

if [ "$preproc" != "" ]; then
	if [ "$outfile" != "" ]; then
		ARGS="$ARGS -c -Fi$outfile"
	else
		ARGS=$(echo $ARGS | sed s/-P/-E/)
	fi
else
	ARGS="$ARGS -c"
	if [ "$outfile" != "" ]; then
		if [ "$compile" != "" ]; then
			ARGS="$ARGS -Fo$outfile"
		else
			ARGS="$ARGS -Fe$outfile"
		fi
	fi
fi
EXTRALIBS="$EXTRALIBS $FORCED_LIBS"

if [ "$deps" != "" ]; then
	$ARGS -Zs -showIncludes | awk '/including/ { sub(/^.*file: */, ""); gsub(/\\/, "/"); if (!match($0, / /)) print "'$inputfile':", $0 }'
	exit $?
fi

if [ "$LIBDIR" != "" -o "$EXTRALIBS" != "" -o "$BUILD_LIB" != "" ]; then
    if [ "$BUILD_LIB" != "" ]; then
        # Ensure all our libraries are called "libXXX"
        ARGS="$ARGS -link $EXTRALIBS $LIBDIR"
        ARGS="$ARGS -out:$outfile -APPCONTAINER"
    fi
fi

echo $ARGS
cmd /C "$ARGS"
exit $?

