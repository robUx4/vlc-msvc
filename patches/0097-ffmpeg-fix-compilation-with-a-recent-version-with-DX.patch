From 76d3816a657aafa496269dcf2ee35fa9a0d02bae Mon Sep 17 00:00:00 2001
From: Steve Lhomme <robux4@gmail.com>
Date: Thu, 25 Jun 2015 16:19:20 +0200
Subject: [PATCH 97/99] ffmpeg: fix compilation with a recent version with DXVA
 and D3D11VA

---
 contrib/src/ffmpeg/msvc.patch       |  86 ++++++++++++++++-
 contrib/src/ffmpeg/near_field.patch | 183 ++++++++++++++++++++++++++++++++++++
 contrib/src/ffmpeg/rules.mak        |  21 +++--
 3 files changed, 278 insertions(+), 12 deletions(-)
 create mode 100644 contrib/src/ffmpeg/near_field.patch

diff --git a/contrib/src/ffmpeg/msvc.patch b/contrib/src/ffmpeg/msvc.patch
index f8944c9..7f94180 100644
--- a/contrib/src/ffmpeg/msvc.patch
+++ b/contrib/src/ffmpeg/msvc.patch
@@ -1,6 +1,8 @@
---- ffmpeg/configure	2015-01-08 12:58:43.000000000 +0100
-+++ /home/vlc/vlc/contrib/windowsphone/ffmpeg/configure	2014-12-15 16:56:13.022084500 +0100
-@@ -2705,7 +2702,7 @@
+diff --git a/configure b/configure
+index b10715f..3d26996 100755
+--- a/configure
++++ b/configure
+@@ -2779,7 +2779,7 @@
              -lavifil32)           echo vfw32.lib ;;
              -lavicap32)           echo vfw32.lib user32.lib ;;
              -l*)                  echo ${flag#-l}.lib ;;
@@ -9,10 +11,34 @@
              *)                    echo $flag ;;
          esac
      done
-@@ -3044,6 +3041,10 @@
+@@ -2996,20 +2996,20 @@
+         _cflags_size="-O2 -Munroll=c:1 $opt_common"
+         _cflags_noopt="-O1"
+         _flags_filter=pgi_flags
+-    elif $_cc 2>&1 | grep -q 'Microsoft.*ARM.*Assembler'; then
++    elif $_cc -nologo- 2>&1 | grep -q 'Microsoft.*ARM.*Assembler'; then
+         _type=armasm
+         _ident=$($_cc | head -n1)
+         # 4509: "This form of conditional instruction is deprecated"
+         _flags="-nologo -ignore 4509"
+         _flags_filter=armasm_flags
+-    elif $_cc 2>&1 | grep -q Microsoft; then
++    elif $_cc -nologo- 2>&1 | grep -q Microsoft; then
+         _type=msvc
+         _ident=$($_cc 2>&1 | head -n1)
+         _DEPCMD='$(DEP$(1)) $(DEP$(1)FLAGS) $($(1)DEP_FLAGS) $< 2>&1 | awk '\''/including/ { sub(/^.*file: */, ""); gsub(/\\/, "/"); if (!match($$0, / /)) print "$@:", $$0 }'\'' > $(@:.o=.d)'
+         _DEPFLAGS='$(CPPFLAGS) $(CFLAGS) -showIncludes -Zs'
+         _cflags_speed="-O2"
+         _cflags_size="-O1"
+-        if $_cc 2>&1 | grep -q Linker; then
++        if $_cc -nologo- 2>&1 | grep -q Linker; then
+             _ld_o='-out:$@'
+         else
+             _ld_o='-Fe$@'
+@@ -3112,6 +3112,10 @@
  add_host_ldflags $_flags $_ldflags
  HOSTLD_O=${_ld_o-$HOSTLD_O}
- 
+
 +_ldflags=$LDFLAGS
 +LDFLAGS=
 +add_ldflags $_ldflags
@@ -20,3 +46,53 @@
  if [ -z "$CC_DEPFLAGS" ] && [ "$dep_cc" != "$cc" ]; then
      probe_cc depcc "$dep_cc"
      CCDEP=${_DEPCMD:-$DEPCMD}
+@@ -3742,9 +3746,4 @@
+                 add_host_cppflags -Dsnprintf=_snprintf
+-             else
+-                add_compat strtod.o strtod=avpriv_strtod
+-                add_compat msvcrt/snprintf.o snprintf=avpriv_snprintf   \
+-                                             _snprintf=avpriv_snprintf  \
+-                                             vsnprintf=avpriv_vsnprintf
+             fi
+         fi
+         # The MSVC 2010 headers (Win 7.0 SDK) set _WIN32_WINNT to
+@@ -4234,7 +4235,7 @@
+
+ check_struct "sys/time.h sys/resource.h" "struct rusage" ru_maxrss
+
+-check_type "windows.h dxva.h" "DXVA_PicParams_HEVC"
++check_type "windows.h dxva.h" "DXVA_PicParams_HEVC" -DWINAPI_FAMILY=WINAPI_FAMILY_DESKTOP_APP
+ check_type "windows.h d3d11.h" "ID3D11VideoDecoder"
+ check_type "d3d9.h dxva2api.h" DXVA2_ConfigPictureDecode -D_WIN32_WINNT=0x0600
+
+
+diff --git a/libavcodec/dxva2_internal.h b/libavcodec/dxva2_internal.h
+index 3b651a4..9b6bbbc3 100644
+--- a/libavcodec/dxva2_internal.h
++++ b/libavcodec/dxva2_internal.h
+@@ -34,6 +34,9 @@
+ #include "d3d11va.h"
+ #endif
+ #if HAVE_DXVA_H
++/* dxva.h defines nothing otherwise but it works */
++#undef WINAPI_FAMILY
++#define WINAPI_FAMILY WINAPI_FAMILY_DESKTOP_APP
+ #include <dxva.h>
+ #endif
+ 
+--- ffmpeg/libavutil/internal.h.orig    2015-06-24 15:35:36.503641400 +0200
++++ ffmpeg/libavutil/internal.h 2015-06-24 15:36:37.515131100 +0200
+@@ -202,13 +202,7 @@
+ void avpriv_request_sample(void *avc,
+                            const char *msg, ...) av_printf_format(2, 3);
+
+ #if HAVE_LIBC_MSVCRT
+-#include <crtversion.h>
+-#if defined(_VC_CRT_MAJOR_VERSION) && _VC_CRT_MAJOR_VERSION < 14
+-#pragma comment(linker, "/include:"EXTERN_PREFIX"avpriv_strtod")
+-#pragma comment(linker, "/include:"EXTERN_PREFIX"avpriv_snprintf")
+-#endif
+-
+ #define avpriv_open ff_open
+ #endif
+
diff --git a/contrib/src/ffmpeg/near_field.patch b/contrib/src/ffmpeg/near_field.patch
new file mode 100644
index 0000000..911d2a0
--- /dev/null
+++ b/contrib/src/ffmpeg/near_field.patch
@@ -0,0 +1,183 @@
+diff --git a/libavcodec/jpegls.c b/libavcodec/jpegls.c
+index 19d461f..8b5556b 100644
+--- a/libavcodec/jpegls.c
++++ b/libavcodec/jpegls.c
+@@ -32,7 +32,7 @@ void ff_jpegls_init_state(JLSState *state)
+ {
+     int i;
+ 
+-    state->twonear = state->near * 2 + 1;
++    state->twonear = state->near_lossless * 2 + 1;
+     state->range   = (state->maxval + state->twonear - 1) / state->twonear + 1;
+ 
+     // QBPP = ceil(log2(RANGE))
+@@ -75,25 +75,25 @@ void ff_jpegls_reset_coding_parameters(JLSState *s, int reset_all)
+         factor = FFMIN(s->maxval, 4095) + 128 >> 8;
+ 
+         if (s->T1 == 0 || reset_all)
+-            s->T1 = iso_clip(factor * (basic_t1 - 2) + 2 + 3 * s->near,
+-                             s->near + 1, s->maxval);
++            s->T1 = iso_clip(factor * (basic_t1 - 2) + 2 + 3 * s->near_lossless,
++                             s->near_lossless + 1, s->maxval);
+         if (s->T2 == 0 || reset_all)
+-            s->T2 = iso_clip(factor * (basic_t2 - 3) + 3 + 5 * s->near,
++            s->T2 = iso_clip(factor * (basic_t2 - 3) + 3 + 5 * s->near_lossless,
+                              s->T1, s->maxval);
+         if (s->T3 == 0 || reset_all)
+-            s->T3 = iso_clip(factor * (basic_t3 - 4) + 4 + 7 * s->near,
++            s->T3 = iso_clip(factor * (basic_t3 - 4) + 4 + 7 * s->near_lossless,
+                              s->T2, s->maxval);
+     } else {
+         factor = 256 / (s->maxval + 1);
+ 
+         if (s->T1 == 0 || reset_all)
+-            s->T1 = iso_clip(FFMAX(2, basic_t1 / factor + 3 * s->near),
+-                             s->near + 1, s->maxval);
++            s->T1 = iso_clip(FFMAX(2, basic_t1 / factor + 3 * s->near_lossless),
++                             s->near_lossless + 1, s->maxval);
+         if (s->T2 == 0 || reset_all)
+-            s->T2 = iso_clip(FFMAX(3, basic_t2 / factor + 5 * s->near),
++            s->T2 = iso_clip(FFMAX(3, basic_t2 / factor + 5 * s->near_lossless),
+                              s->T1, s->maxval);
+         if (s->T3 == 0 || reset_all)
+-            s->T3 = iso_clip(FFMAX(4, basic_t3 / factor + 7 * s->near),
++            s->T3 = iso_clip(FFMAX(4, basic_t3 / factor + 7 * s->near_lossless),
+                              s->T2, s->maxval);
+     }
+ 
+diff --git a/libavcodec/jpegls.h b/libavcodec/jpegls.h
+index eae3943..98b73a4 100644
+--- a/libavcodec/jpegls.h
++++ b/libavcodec/jpegls.h
+@@ -39,7 +39,7 @@ typedef struct JLSState {
+     int T1, T2, T3;
+     int A[367], B[367], C[365], N[367];
+     int limit, reset, bpp, qbpp, maxval, range;
+-    int near, twonear;
++    int near_lossless, twonear;
+     int run_index[3];
+ } JLSState;
+ 
+@@ -64,11 +64,11 @@ static inline int ff_jpegls_quantize(JLSState *s, int v)
+             return -3;
+         if (v <= -s->T1)
+             return -2;
+-        if (v < -s->near)
++        if (v < -s->near_lossless)
+             return -1;
+         return 0;
+     } else {
+-        if (v <= s->near)
++        if (v <= s->near_lossless)
+             return 0;
+         if (v < s->T1)
+             return 1;
+diff --git a/libavcodec/jpeglsdec.c b/libavcodec/jpeglsdec.c
+index 3b93799..3c4bbc2 100644
+--- a/libavcodec/jpeglsdec.c
++++ b/libavcodec/jpeglsdec.c
+@@ -105,7 +105,7 @@ static inline int ls_get_code_regular(GetBitContext *gb, JLSState *state, int Q)
+         ret >>= 1;
+ 
+     /* for NEAR=0, k=0 and 2*B[Q] <= - N[Q] mapping is reversed */
+-    if (!state->near && !k && (2 * state->B[Q] <= -state->N[Q]))
++    if (!state->near_lossless && !k && (2 * state->B[Q] <= -state->N[Q]))
+         ret = -(ret + 1);
+ 
+     ret = ff_jpegls_update_state_regular(state, Q, ret);
+@@ -180,9 +180,9 @@ static inline void ls_decode_line(JLSState *state, MJpegDecodeContext *s,
+         D1 = Rb - Rc;
+         D2 = Rc - Ra;
+         /* run mode */
+-        if ((FFABS(D0) <= state->near) &&
+-            (FFABS(D1) <= state->near) &&
+-            (FFABS(D2) <= state->near)) {
++        if ((FFABS(D0) <= state->near_lossless) &&
++            (FFABS(D1) <= state->near_lossless) &&
++            (FFABS(D2) <= state->near_lossless)) {
+             int r;
+             int RItype;
+ 
+@@ -215,13 +215,13 @@ static inline void ls_decode_line(JLSState *state, MJpegDecodeContext *s,
+ 
+             /* decode run termination value */
+             Rb     = R(last, x);
+-            RItype = (FFABS(Ra - Rb) <= state->near) ? 1 : 0;
++            RItype = (FFABS(Ra - Rb) <= state->near_lossless) ? 1 : 0;
+             err    = ls_get_code_runterm(&s->gb, state, RItype,
+                                          ff_log2_run[state->run_index[comp]]);
+             if (state->run_index[comp])
+                 state->run_index[comp]--;
+ 
+-            if (state->near && RItype) {
++            if (state->near_lossless && RItype) {
+                 pred = Ra + err;
+             } else {
+                 if (Rb < Ra)
+@@ -255,10 +255,10 @@ static inline void ls_decode_line(JLSState *state, MJpegDecodeContext *s,
+             /* we have to do something more for near-lossless coding */
+             pred += err;
+         }
+-        if (state->near) {
+-            if (pred < -state->near)
++        if (state->near_lossless) {
++            if (pred < -state->near_lossless)
+                 pred += state->range * state->twonear;
+-            else if (pred > state->maxval + state->near)
++            else if (pred > state->maxval + state->near_lossless)
+                 pred -= state->range * state->twonear;
+             pred = av_clip(pred, 0, state->maxval);
+         }
+@@ -269,7 +269,7 @@ static inline void ls_decode_line(JLSState *state, MJpegDecodeContext *s,
+     }
+ }
+ 
+-int ff_jpegls_decode_picture(MJpegDecodeContext *s, int near,
++int ff_jpegls_decode_picture(MJpegDecodeContext *s, int near_lossless,
+                              int point_transform, int ilv)
+ {
+     int i, t = 0;
+@@ -289,7 +289,7 @@ int ff_jpegls_decode_picture(MJpegDecodeContext *s, int near,
+         return AVERROR(ENOMEM);
+     }
+     /* initialize JPEG-LS state from JPEG parameters */
+-    state->near   = near;
++    state->near_lossless   = near_lossless;
+     state->bpp    = (s->bits < 2) ? 2 : s->bits;
+     state->maxval = s->maxval;
+     state->T1     = s->t1;
+@@ -307,7 +307,7 @@ int ff_jpegls_decode_picture(MJpegDecodeContext *s, int near,
+     ff_dlog(s->avctx,
+             "JPEG-LS params: %ix%i NEAR=%i MV=%i T(%i,%i,%i) "
+             "RESET=%i, LIMIT=%i, qbpp=%i, RANGE=%i\n",
+-            s->width, s->height, state->near, state->maxval,
++            s->width, s->height, state->near_lossless, state->maxval,
+             state->T1, state->T2, state->T3,
+             state->reset, state->limit, state->qbpp, state->range);
+     ff_dlog(s->avctx, "JPEG params: ILV=%i Pt=%i BPP=%i, scan = %i\n",
+diff --git a/libavcodec/jpeglsdec.h b/libavcodec/jpeglsdec.h
+index d60a87b..79730af 100644
+--- a/libavcodec/jpeglsdec.h
++++ b/libavcodec/jpeglsdec.h
+@@ -36,7 +36,7 @@
+  */
+ int ff_jpegls_decode_lse(MJpegDecodeContext *s);
+ 
+-int ff_jpegls_decode_picture(MJpegDecodeContext *s, int near,
++int ff_jpegls_decode_picture(MJpegDecodeContext *s, int near_lossless,
+                              int point_transform, int ilv);
+ 
+ #endif /* AVCODEC_JPEGLSDEC_H */
+diff --git a/libavcodec/mjpegdec.h b/libavcodec/mjpegdec.h
+index aa4703a..cf30a27 100644
+--- a/libavcodec/mjpegdec.h
++++ b/libavcodec/mjpegdec.h
+@@ -66,7 +66,7 @@ typedef struct MJpegDecodeContext {
+     int bits;           /* bits per component */
+ 
+     int maxval;
+-    int near;         ///< near lossless bound (si 0 for lossless)
++    int near_lossless;         ///< near lossless bound (si 0 for lossless)
+     int t1,t2,t3;
+     int reset;        ///< context halfing intervall ?rename
+ 
diff --git a/contrib/src/ffmpeg/rules.mak b/contrib/src/ffmpeg/rules.mak
index 65cf723..693c5bd 100644
--- a/contrib/src/ffmpeg/rules.mak
+++ b/contrib/src/ffmpeg/rules.mak
@@ -14,12 +14,10 @@ FFMPEG_SNAPURL := http://git.libav.org/?p=libav.git;a=snapshot;h=$(HASH);sf=tgz
 FFMPEG_GITURL := git://git.libav.org/libav.git
 endif
 
-ifdef HAVE_VISUALSTUDIO
-CC:=cl
-endif
-
 FFMPEGCONF = \
 	--cc="$(CC)" \
+	--ld="$(LD)" \
+	--ar="$(AR)" \
 	--pkg-config="$(PKG_CONFIG)" \
 	--disable-doc \
 	--disable-encoder=vorbis \
@@ -140,9 +138,12 @@ endif
 
 # Windows
 ifdef HAVE_WIN32
+ifndef HAVE_VISUALSTUDIO
+DEPS_ffmpeg += d3d11
 ifndef HAVE_MINGW_W64
 DEPS_ffmpeg += directx
 endif
+endif
 FFMPEGCONF += --target-os=mingw32 --enable-memalign-hack
 FFMPEGCONF += --enable-w32threads --enable-dxva2
 
@@ -150,10 +151,11 @@ ifdef HAVE_WIN64
 FFMPEGCONF += --cpu=athlon64 --arch=x86_64
 else # !WIN64
 ifdef HAVE_WINPHONE
-FFMPEGCONF += --arch=arm --cpu=armv7-a --target-os=win32 --extra-cflags='-DWINAPI_FAMILY=WINAPI_FAMILY_PHONE_APP -MD -D__ARM_PCS_VFP -D_WIN32_WINNT=0x602' --disable-dxva2 --as=armasm
+FFMPEGCONF += --target-os=win32 --extra-cflags='-D__ARM_PCS_VFP' --disable-dxva2
 else
 ifdef HAVE_WINDOWSRT
-FFMPEGCONF += --arch=arm --cpu=armv7-a --target-os=win32 --extra-cflags='-DWINAPI_FAMILY=WINAPI_FAMILY_APP -MD -D__ARM_PCS_VFP -D_WIN32_WINNT=0x602' --disable-dxva2 --as=armasm
+#FFMPEGCONF += --arch=arm --cpu=armv7-a --target-os=win32 --extra-cflags='-DWINAPI_FAMILY=WINAPI_FAMILY_APP -MD -D__ARM_PCS_VFP -D_WIN32_WINNT=0x602' --disable-dxva2
+FFMPEGCONF += --target-os=win32 --extra-cflags='-D__ARM_PCS_VFP' --disable-dxva2
 else
 FFMPEGCONF+= --cpu=i686 --arch=x86
 endif
@@ -162,6 +164,9 @@ endif
 
 ifdef HAVE_VISUALSTUDIO
 FFMPEGCONF += --toolchain=msvc
+ifeq ($(VLC_ARCH),arm)
+FFMPEGCONF += --as=armasm
+endif
 endif
 
 else # !Windows
@@ -197,6 +202,7 @@ ffmpeg: ffmpeg-$(HASH).tar.xz .sum-ffmpeg
 	$(XZCAT) "$<" | (cd $@-$(HASH) && tar xv --strip-components=1)
 ifdef HAVE_VISUALSTUDIO
 	$(APPLY) $(SRC)/ffmpeg/msvc.patch
+	$(APPLY) $(SRC)/ffmpeg/near_field.patch
 endif
 	$(MOVE)
 
@@ -204,5 +210,6 @@ endif
 	cd $< && $(HOSTVARS) ./configure \
 		--extra-ldflags="$(LDFLAGS)" $(FFMPEGCONF) \
 		--prefix="$(PREFIX)" --enable-static --disable-shared
-	cd $< && $(MAKE) install-libs install-headers
+	cd $< && $(MAKE) -j`nproc` install-libs install-headers
+#	cd $< && $(MAKE) install-libs install-headers
 	touch $@
-- 
1.9.5.msysgit.1

