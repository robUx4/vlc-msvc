From cf1766c1d3f9feb9c273c3fa68cbfabf28400079 Mon Sep 17 00:00:00 2001
From: Steve Lhomme <robux4@videolabs.io>
Date: Wed, 24 Jun 2015 17:17:35 +0200
Subject: [PATCH 081/128] vlc_atomic.h: bring back the local atomic code as
 MSVC is not C11 compliant

---
 include/vlc_atomic.h | 251 +++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 251 insertions(+)

diff --git a/include/vlc_atomic.h b/include/vlc_atomic.h
index ef0a1ee..cd6641a 100644
--- a/include/vlc_atomic.h
+++ b/include/vlc_atomic.h
@@ -35,8 +35,155 @@
 
 # ifndef __cplusplus
 #  if (__STDC_VERSION__ >= 201112L) && !defined (__STDC_NO_ATOMICS__)
+#  if defined(_MSC_VER)
+
+#  define ATOMIC_FLAG_INIT false
+
+#  define ATOMIC_VAR_INIT(value) (value)
+
+#  define atomic_init(obj, value) \
+    do { *(obj) = (value); } while(0)
+
+#  define kill_dependency(y) \
+    ((void)0)
+
+#  define atomic_thread_fence(order) \
+    __sync_synchronize()
+
+#  define atomic_signal_fence(order) \
+    ((void)0)
+
+#  define atomic_is_lock_free(obj) \
+    false
+
+/* In principles, __sync_*() only supports int, long and long long and their
+ * unsigned equivalents, i.e. 4-bytes and 8-bytes types, although GCC also
+ * supports 1 and 2-bytes types. Some non-x86 architectures do not support
+ * 8-byte atomic types (or not efficiently). */
+/* Some atomic operations of the Interlocked API are only
+   available for desktop apps. Thus we define the atomic types to
+   be at least 32 bits wide. */
+typedef      int_least32_t atomic_flag;
+typedef      int_least32_t atomic_bool;
+typedef      int_least32_t atomic_char;
+typedef      int_least32_t atomic_schar;
+typedef     uint_least32_t atomic_uchar;
+typedef      int_least32_t atomic_short;
+typedef     uint_least32_t atomic_ushort;
+typedef          int       atomic_int;
+typedef unsigned int       atomic_uint;
+typedef          long      atomic_long;
+typedef unsigned long      atomic_ulong;
+typedef          long long atomic_llong;
+typedef unsigned long long atomic_ullong;
+typedef          wchar_t   atomic_wchar_t;
+typedef       int_least8_t atomic_int_least8_t;
+typedef      uint_least8_t atomic_uint_least8_t;
+typedef      int_least16_t atomic_int_least16_t;
+typedef     uint_least16_t atomic_uint_least16_t;
+typedef      int_least32_t atomic_int_least32_t;
+typedef     uint_least32_t atomic_uint_least32_t;
+typedef      int_least64_t atomic_int_least64_t;
+typedef     uint_least64_t atomic_uint_least64_t;
+typedef       int_fast8_t atomic_int_fast8_t;
+typedef      uint_fast8_t atomic_uint_fast8_t;
+typedef      int_fast16_t atomic_int_fast16_t;
+typedef     uint_fast16_t atomic_uint_fast16_t;
+typedef      int_fast32_t atomic_int_fast32_t;
+typedef     uint_fast32_t atomic_uint_fast32_t;
+typedef      int_fast64_t atomic_int_fast64_t;
+typedef     uint_fast64_t atomic_uint_fast64_t;
+typedef          intptr_t atomic_intptr_t;
+typedef         uintptr_t atomic_uintptr_t;
+typedef            size_t atomic_size_t;
+typedef         ptrdiff_t atomic_ptrdiff_t;
+typedef          intmax_t atomic_intmax_t;
+typedef         uintmax_t atomic_uintmax_t;
+
+# include <windows.h>
+
+/*** Use the Interlocked API. ***/
+
+/* Define macros in order to dispatch to the correct function depending on the type.
+   Several ranges are need because some operations are not implemented for all types. */
+#  define atomic_type_dispatch_32_64(operation, object, ...) \
+    (sizeof(*object) == 4 ? operation((LONG *)object, __VA_ARGS__) : \
+    sizeof(*object) == 8 ? operation##64((LONGLONG *)object, __VA_ARGS__) : \
+    (abort(), 0))
+
+#  define atomic_type_dispatch_16_64(operation, object, ...) \
+    (sizeof(*object) == 2 ? operation##16((short *)object, __VA_ARGS__) : \
+    atomic_type_dispatch_32_64(operation, object, __VA_ARGS__))
+
+#  define atomic_type_dispatch_8_64(operation, object, ...) \
+    (sizeof(*object) == 1 ? operation##8((char *)object, __VA_ARGS__) : \
+    atomic_type_dispatch_16_64(operation, object, __VA_ARGS__))
+
+#  define atomic_store(object,desired) \
+    atomic_type_dispatch_16_64(InterlockedExchange, object, desired)
+#  define atomic_store_explicit(object,desired,order) \
+    atomic_store(object, desired)
+
+#  define atomic_load(object) \
+    atomic_type_dispatch_16_64(InterlockedCompareExchange, object, 0, 0)
+#  define atomic_load_explicit(object,order) \
+    atomic_load(object)
+
+#  define atomic_exchange(object,desired) \
+    atomic_type_dispatch_16_64(InterlockedExchange, object, desired)
+#  define atomic_exchange_explicit(object,desired,order) \
+    atomic_exchange(object, desired)
+
+#  define atomic_compare_exchange_strong(object,expected,desired) \
+    atomic_type_dispatch_16_64(InterlockedCompareExchange, object, *expected, desired) == *expected
+#  define atomic_compare_exchange_strong_explicit(object,expected,desired,order) \
+    atomic_compare_exchange_strong(object, expected, desired)
+#  define atomic_compare_exchange_weak(object,expected,desired) \
+    atomic_compare_exchange_strong(object, expected, desired)
+#  define atomic_compare_exchange_weak_explicit(object,expected,desired,order) \
+    atomic_compare_exchange_weak(object, expected, desired)
+
+#  define atomic_fetch_add(object,operand) \
+    atomic_type_dispatch_32_64(InterlockedExchangeAdd, object, operand)
+#  define atomic_fetch_add_explicit(object,operand,order) \
+    atomic_fetch_add(object, operand)
+
+#  define atomic_fetch_sub(object,operand) \
+    atomic_type_dispatch_32_64(InterlockedExchangeAdd, object, -(LONGLONG)operand)
+#  define atomic_fetch_sub_explicit(object,operand,order) \
+    atomic_fetch_sub(object, operand)
+
+#  define atomic_fetch_or(object,operand) \
+    atomic_type_dispatch_8_64(InterlockedOr, object, operand)
+#  define atomic_fetch_or_explicit(object,operand,order) \
+    atomic_fetch_or(object, operand)
+
+#  define atomic_fetch_xor(object,operand) \
+    atomic_type_dispatch_8_64(InterlockedXor, object, operand)
+#  define atomic_fetch_xor_explicit(object,operand,order) \
+    atomic_fetch_sub(object, operand)
+
+#  define atomic_fetch_and(object,operand) \
+    atomic_type_dispatch_8_64(InterlockedAnd, object, operand)
+#  define atomic_fetch_and_explicit(object,operand,order) \
+    atomic_fetch_and(object, operand)
+
+#  define atomic_flag_test_and_set(object) \
+    atomic_exchange(object, true)
+
+#  define atomic_flag_test_and_set_explicit(object,order) \
+    atomic_flag_test_and_set(object)
+
+#  define atomic_flag_clear(object) \
+    atomic_store(object, false)
+
+#  define atomic_flag_clear_explicit(object,order) \
+    atomic_flag_clear(object)
+
+#  else /* _MSC_VER */
 /*** Native C11 atomics ***/
 #   include <stdatomic.h>
+#  endif /* _MSC_VER */
 
 #  else
 /*** Intel/GCC atomics ***/
@@ -60,6 +207,22 @@
 #  define atomic_is_lock_free(obj) \
     false
 
+/* In principles, __sync_*() only supports int, long and long long and their
+ * unsigned equivalents, i.e. 4-bytes and 8-bytes types, although GCC also
+ * supports 1 and 2-bytes types. Some non-x86 architectures do not support
+ * 8-byte atomic types (or not efficiently). */
+#  if defined (_MSC_VER)
+/* Some atomic operations of the Interlocked API are only
+   available for desktop apps. Thus we define the atomic types to
+   be at least 32 bits wide. */
+typedef      int_least32_t atomic_flag;
+typedef      int_least32_t atomic_bool;
+typedef      int_least32_t atomic_char;
+typedef      int_least32_t atomic_schar;
+typedef     uint_least32_t atomic_uchar;
+typedef      int_least32_t atomic_short;
+typedef     uint_least32_t atomic_ushort;
+#  else
 typedef          bool      atomic_flag;
 typedef          bool      atomic_bool;
 typedef          char      atomic_char;
@@ -67,6 +230,7 @@ typedef   signed char      atomic_schar;
 typedef unsigned char      atomic_uchar;
 typedef          short     atomic_short;
 typedef unsigned short     atomic_ushort;
+#  endif
 typedef          int       atomic_int;
 typedef unsigned int       atomic_uint;
 typedef          long      atomic_long;
@@ -99,6 +263,7 @@ typedef         ptrdiff_t atomic_ptrdiff_t;
 typedef          intmax_t atomic_intmax_t;
 typedef         uintmax_t atomic_uintmax_t;
 
+# if defined (__GCC_HAVE_SYNC_COMPARE_AND_SWAP_4) || (defined (__clang__) && (defined (__x86_64__) || defined (__i386__)))
 #  define atomic_store(object,desired) \
     do { \
         *(object) = (desired); \
@@ -189,6 +354,92 @@ typedef         uintmax_t atomic_uintmax_t;
 #  define atomic_flag_clear_explicit(object,order) \
     atomic_flag_clear(object)
 
+
+# elif defined (_MSC_VER)
+
+# include <windows.h>
+
+/*** Use the Interlocked API. ***/
+
+/* Define macros in order to dispatch to the correct function depending on the type.
+   Several ranges are need because some operations are not implemented for all types. */
+#  define atomic_type_dispatch_32_64(operation, object, ...) \
+    (sizeof(*object) == 4 ? operation((LONG *)object, __VA_ARGS__) : \
+    sizeof(*object) == 8 ? operation##64((LONGLONG *)object, __VA_ARGS__) : \
+    (abort(), 0))
+
+#  define atomic_type_dispatch_16_64(operation, object, ...) \
+    (sizeof(*object) == 2 ? operation##16((short *)object, __VA_ARGS__) : \
+    atomic_type_dispatch_32_64(operation, object, __VA_ARGS__))
+
+#  define atomic_type_dispatch_8_64(operation, object, ...) \
+    (sizeof(*object) == 1 ? operation##8((char *)object, __VA_ARGS__) : \
+    atomic_type_dispatch_16_64(operation, object, __VA_ARGS__))
+
+#  define atomic_store(object,desired) \
+    atomic_type_dispatch_16_64(InterlockedExchange, object, desired)
+#  define atomic_store_explicit(object,desired,order) \
+    atomic_store(object, desired)
+
+#  define atomic_load(object) \
+    atomic_type_dispatch_16_64(InterlockedCompareExchange, object, 0, 0)
+#  define atomic_load_explicit(object,order) \
+    atomic_load(object)
+
+#  define atomic_exchange(object,desired) \
+    atomic_type_dispatch_16_64(InterlockedExchange, object, desired)
+#  define atomic_exchange_explicit(object,desired,order) \
+    atomic_exchange(object, desired)
+
+#  define atomic_compare_exchange_strong(object,expected,desired) \
+    atomic_type_dispatch_16_64(InterlockedCompareExchange, object, *expected, desired) == *expected
+#  define atomic_compare_exchange_strong_explicit(object,expected,desired,order) \
+    atomic_compare_exchange_strong(object, expected, desired)
+#  define atomic_compare_exchange_weak(object,expected,desired) \
+    atomic_compare_exchange_strong(object, expected, desired)
+#  define atomic_compare_exchange_weak_explicit(object,expected,desired,order) \
+    atomic_compare_exchange_weak(object, expected, desired)
+
+#  define atomic_fetch_add(object,operand) \
+    atomic_type_dispatch_32_64(InterlockedExchangeAdd, object, operand)
+#  define atomic_fetch_add_explicit(object,operand,order) \
+    atomic_fetch_add(object, operand)
+
+#  define atomic_fetch_sub(object,operand) \
+    atomic_type_dispatch_32_64(InterlockedExchangeAdd, object, -(LONGLONG)operand)
+#  define atomic_fetch_sub_explicit(object,operand,order) \
+    atomic_fetch_sub(object, operand)
+
+#  define atomic_fetch_or(object,operand) \
+    atomic_type_dispatch_8_64(InterlockedOr, object, operand)
+#  define atomic_fetch_or_explicit(object,operand,order) \
+    atomic_fetch_or(object, operand)
+
+#  define atomic_fetch_xor(object,operand) \
+    atomic_type_dispatch_8_64(InterlockedXor, object, operand)
+#  define atomic_fetch_xor_explicit(object,operand,order) \
+    atomic_fetch_sub(object, operand)
+
+#  define atomic_fetch_and(object,operand) \
+    atomic_type_dispatch_8_64(InterlockedAnd, object, operand)
+#  define atomic_fetch_and_explicit(object,operand,order) \
+    atomic_fetch_and(object, operand)
+
+#  define atomic_flag_test_and_set(object) \
+    atomic_exchange(object, true)
+
+#  define atomic_flag_test_and_set_explicit(object,order) \
+    atomic_flag_test_and_set(object)
+
+#  define atomic_flag_clear(object) \
+    atomic_store(object, false)
+
+#  define atomic_flag_clear_explicit(object,order) \
+    atomic_flag_clear(object)
+
+# else
+#  error FIXME: implement atomic operations for this compiler.
+# endif
 # endif /* !C11 */
 
 typedef atomic_uint_least32_t vlc_atomic_float;
-- 
1.9.5.msysgit.1

